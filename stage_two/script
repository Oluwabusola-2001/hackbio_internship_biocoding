# Reimporting the necessary libraries and reloading the dataset due to code execution reset
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from scipy.stats import ttest_ind
# Load the dataset again

df = pd.read_csv('busola.csv')

# List of columns for each strain and its corresponding WT and MUT wells
strain_columns = {
    'Strain1_Rep1_WT': ['A1', 'B1', 'C1'],
    'Strain1_Rep1_MUT': ['A2', 'B2', 'C2'],
    'Strain1_Rep2_WT': ['A3', 'B3', 'C3'],
    'Strain1_Rep2_MUT': ['A4', 'B4', 'C4'],
    'Strain2_Rep1_WT': ['A5', 'B5', 'C5'],
    'Strain2_Rep1_MUT': ['A6', 'B6', 'C6'],
    'Strain2_Rep2_WT': ['A7', 'B7', 'C7'],
    'Strain2_Rep2_MUT': ['A8', 'B8', 'C8'],
    'Strain3_Rep1_WT': ['A9', 'B9', 'C9'],
    'Strain3_Rep1_MUT': ['A10', 'B10', 'C10'],
    'Strain3_Rep2_WT': ['A11', 'B11', 'C11'],
    'Strain3_Rep2_MUT': ['A12', 'B12', 'C12']
}

# Create a new dataframe to store averaged OD600 for each strain/replicate
averaged_strain_data = pd.DataFrame({'time': df['time']})

# Loop through each strain/replicate and average the corresponding wells
for strain_name, wells in strain_columns.items():
    averaged_strain_data[strain_name] = df[wells].mean(axis=1)

# Display the first few rows of the new dataframe with averaged data
averaged_strain_data.head()

# Plotting the average OD600 readings for each strain/replicate

def plot_growth_curves(averaged_strain_data):
    # Get the strains' columns (excluding the 'time' column)
    strains = [col for col in averaged_strain_data.columns if col != 'time']
    
    plt.figure(figsize=(10, 6))
    
    # Plot each strain/replicate
    for strain in strains:
        plt.plot(averaged_strain_data['time'], averaged_strain_data[strain], label=strain)
    
    plt.xlabel('Time (minutes)')
    plt.ylabel('OD600')
    plt.title('Growth Curves for Each Strain/Replicate')
    plt.legend()
    plt.show()

# Call the function to plot the growth curves
plot_growth_curves(averaged_strain_data)


# Function to calculate carrying capacity time (time to reach 90% of max OD600 value)
def carrying_capacity_time(averaged_strain_data):
    results = []
    
    # Loop through each strain/replicate
    for strain in averaged_strain_data.columns:
        if strain == 'time':
            continue
        
        # Get the OD600 and time values
        od_values = averaged_strain_data[strain]
        time_values = averaged_strain_data['time']
        
        # Calculate the maximum OD600 value
        max_od = od_values.max()
        
        # Find the time when OD600 reaches 90% of max OD value (carrying capacity)
        carrying_capacity_time = time_values[od_values >= 0.9 * max_od].iloc[0]  # First time to reach 90%
        
        # Extract strain type from the column name
        strain_type = strain.split('_')[2]  # Extract 'WT' or 'MUT' from the column name
        
        # Append the result
        strain_name = '_'.join(strain.split('_')[:2])  # Example: 'Strain1_Rep1'
        results.append({'Strain': strain_name, 'Type': strain_type, 'Carrying_Capacity_Time': carrying_capacity_time})
    
    return pd.DataFrame(results)

# Calculate carrying capacity times for all strains
carrying_time_df = carrying_capacity_time(averaged_strain_data)

# Scatter plot of carrying capacity times
plt.figure(figsize=(8, 5))
sns.scatterplot(data=carrying_time_df, x='Strain', y='Carrying_Capacity_Time', hue='Type', style='Type', markers=["o", "X"])
plt.xticks(rotation=45)
plt.title("Carrying Capacity Time for WT and MUT")
plt.show()

# Box plot of carrying capacity times
plt.figure(figsize=(8, 5))
sns.boxplot(data=carrying_time_df, x='Type', y='Carrying_Capacity_Time')
plt.title("Comparison of Carrying Capacity Time (WT vs MUT)")
plt.show()

# Perform t-test to compare carrying capacity times between WT and MUT
wt_times = carrying_time_df[carrying_time_df['Type'] == 'WT']['Carrying_Capacity_Time']
mut_times = carrying_time_df[carrying_time_df['Type'] == 'MUT']['Carrying_Capacity_Time']

t_stat, p_value = ttest_ind(wt_times, mut_times)

print(f"T-test p-value: {p_value}")
if p_value < 0.05:
    print("There is a significant difference between WT and MUT carrying capacity times.")
else:
    print("No significant difference found between WT and MUT carrying capacity times.")
